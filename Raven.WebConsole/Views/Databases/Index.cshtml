@using Raven.WebConsole
@using Raven.WebConsole.Utils
@model Raven.WebConsole.ViewModels.DatabasesViewModel

@{
    ViewBag.Title = "Databases";
    Layout = "~/Views/Shared/ContentPage.cshtml";
}

@section head {
    <script src="@Url.Content("~/Scripts/mustache.js")" type="text/javascript"></script>
    <style type="text/css">
    </style>
}


<div class="head">
    <h1 style="float:left;">@ViewBag.Title</h1>

	<form class="search-form" action="#">
		<fieldset>
			<span class="field"><input type="text" placeholder="Search" id="searchBox"></span>
			<input class="submit" type="image" src="images/search-btn.png" alt="Search">
		</fieldset>
	</form>

    <a id="newButton" class="button" style="float:right;" href="javascript:void(0);">Create a new database</a>
    <div style="float:none;clear:both"></div>
<div/>

<ul class="flach db"></ul>

<div class="loading" style="display: none;width: 100%">
    <img src="/images/ajax-loader.gif" alt="loading..." style="margin-left: auto; margin-right: auto; width: 55px; margin-bottom: 20px; display: block"/>    
</div>

@using (Html.BeginHtmlTemplate("dbsTemplate"))
{
    <text>
    {{#dbs}}
        <li class="db" data-db="{{name}}">
            <a class="name link-on-hover" title="Click to open studio for {{name}}" href="@(Model.BaseUrl)/raven/studio.html#/home?database={{name}}">{{name}}</a>
            <ul class="props">
                <li>
                    <span class="name">Size:</span><span class="value">{{size}} MB</span>
                </li>
                <li class="lastBackup">
                    <span class="name">Last backup:</span><span class="value"><span class="humaneDate" data-date="{{lastBackup}}"></span></span>
                </li>
                <li class="bundles">
                    <span class="name">Active bundles:</span><span class="value">{{bundles}}</span>
                </li>
            </ul>
            <ul class="buttons">
                <li>
                    <a class="delete button" href="javascript:void(0);">Delete</a>
                    <form style="display: none" action="@(Url.Action("Delete"))?name={{name}}" method="post"></form>
                </li>
                <li><a class="backup button" href="javascript:void(0);">Backup</a></li>
                <li><a class="restore button" href="javascript:void(0);">Restore</a></li>
            </ul>
        </li>
    {{/dbs}}
    </text>
}

<div id="newDialog">
    <form action="@Url.Action("New")" method="post" style="margin-top: 20px; margin-bottom: 20px">
        <fieldset>
            <legend></legend>
            <label for="name">Name: </label>
            <input type="text" name="name" />
        </fieldset>
    </form>
</div>

<div id="backupDialog" style="display: none">
    <form action="@Url.Action("Backup")" method="post" style="margin-top: 20px; margin-bottom: 20px">
        <fieldset>
            <legend></legend>
            <table>
                <tr>
                    <td><label for="backupPath">Path: </label></td>
                    <td><input type="text" name="path" id="backupPath"/></td>
                </tr>
                <tr>
                    <td></td>
                    <td><input type="checkbox" name="incremental" id="backupIsIncremental"/> <label for="backupIsIncremental">Incremental backup</label></td>
                </tr>
            </table>
            <input type="hidden" name="name"/>
        </fieldset>
    </form>
</div>

<div id="restoreDialog" style="display: none">
    <form action="@Url.Action("Restore")" method="post" style="margin-top: 20px; margin-bottom: 20px">
        <fieldset>
            <legend></legend>
            <table>
                <tr>
                    <td><label for="restoreFrom">Path of backup files: </label></td>
                    <td><input type="text" name="from" id="restoreFrom"/></td>
                </tr>
                <tr>
                    <td><label for="restoreTo">Database directory: </label></td>
                    <td><input type="text" name="to" id="restoreTo"/></td>
                </tr>
            </table>
            <input type="hidden" name="name"/>
        </fieldset>
    </form>
</div>

<div id="deleteConfirmationDialog" style="display: none">
    <form action="@Url.Action("Delete")" method="post" style="margin-top: 20px; margin-bottom: 20px">
        <strong>This is a destructive operation with no undo.</strong>
        <br/>
        <br/>
        All data will be deleted from disk!
        <br/>
        <br/>
        <fieldset>
            <legend></legend>
            <label for="deleteDatabaseConfirmationNameVerify">Please enter the database name below to confirm:</label>
            <br/>
            <input type="text" name="nameVerify" id="deleteDatabaseConfirmationNameVerify" />
            <input type="hidden" name="name" id="deleteDatabaseConfirmationName"/>
        </fieldset>
    </form>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        var model = @Html.Raw(Json.Encode(Model));

        var modelState = {
            query: '',
            pageSize: 10,
            start: 0
        };

        var updateDates = function () {
            $('.humaneDate').each(function() {
                var $t = $(this);
                var d = $t.data('date');
                var s = d == '' ? 'Never' : humaneDate(new Date(d));
                $t.html(s);
            });
        };

        var renderDatabases = function(modelDatabases, append) {
            var template = $('#dbsTemplate').html();
            var viewModel = {
                dbs: $.map(modelDatabases, function (db) {
                    return {
                        name: db.Name,
                        size: db.SizeMb,
                        lastBackup: db.LastBackup ? new Date(raven.utils.deserializeDate(db.LastBackup)).getTime() : "",
                        bundles: db.ActiveBundles || "(none)"
                    };
                })                  
            };
            var ul = $('.flach.db');
            var rendered = Mustache.render(template, viewModel);
            
            if (append) {
                ul.append($(rendered));
            } else {
                ul.html(rendered);
            }

            updateDates();
        };

        renderDatabases(model.Databases);
        
        setTimeout(function () {
            updateDates();
            setTimeout(updateDates, 60 * 1000);
        });

        var waitingForSearchKey = false;

        var handleSearchQuery = function() {
            waitingForSearchKey = false;
            var query = $('#searchBox').val();
            
            if (query == prevSearchBoxVal) {
                return;
            }

            prevSearchBoxVal = query;
            $('.flach.db').empty();
            $('.loading').show();
            
            modelState.query = query;
            modelState.start = 0;
            
            $.getJSON("@Url.Action("Index")", 
                { output: "json",  query: modelState.query }, 
                function(response) {
                    $('.loading').hide();
                    model = response;
                    renderDatabases(response.Databases);
                });
        };

        var prevSearchBoxVal = $('#searchBox').val();
        if (prevSearchBoxVal !== '') {
            handleSearchQuery();
        }

        $('#searchBox').on('keyup', function() {
            if (waitingForSearchKey)
                return;

            waitingForSearchKey = true;
            setTimeout(handleSearchQuery, 200);
        });

        var waitingForScroll = false;
        $(window).scroll(function() {
            if (model.More && !waitingForScroll && ($(window).scrollTop() > ($(document).height() - $(window).height()) - 200)) {
                waitingForScroll = true;
                $('.loading').show();
                modelState.start += modelState.pageSize;
                $.getJSON("@Url.Action("Index")", 
                    { output: "json",  query: modelState.query, start: modelState.start, pageSize: modelState.pageSize }, 
                    function(response) {
                        $('.loading').hide();
                        waitingForScroll = false;
                        for(var i=0; i<response.Databases.length; ++i) {
                            model.Databases.push(response.Databases[i]);
                        }

                        model.More = response.More;
                        renderDatabases(response.Databases, true);
                    });
            }
        });
        
        $('#newButton').button({ icons: { primary: 'ui-icon-plus'} });
        $('.button.delete')
            .on('click', function(e) {
                var button = $(e.target);

                var db = button.parents('li.db').data('db');

                $('#deleteConfirmationDialog').dialog({
                    autoOpen: true,
                    modal: true,
                    title: 'About to delete database ' + db,
                    width: 500,
                    buttons: {
                        'Delete': function () {
                            $(this).parent().find('form').submit();
                            return true;
                        },
                        'Cancel': function () {
                            $('#deleteConfirmationDialog').dialog('destroy');
                        }
                    }
                });
                
                $('#deleteDatabaseConfirmationName').val(db);
                $('#deleteDatabaseConfirmationNameVerify').val('');
            })
            .button({ icons: { primary: 'ui-icon-trash'} });
        
        $('.button.restore')
            .button({ icons: { primary: 'rd-icon-restore'} });
        
        var savedBackupPath;
        $('.button.backup')
            .button({ icons: { primary: 'rd-icon-backup'} })
            .on('click', function (e) {
                var db = $(e.target).parents('.db').data('db');
                var dialog = $('#backupDialog');
                dialog.find('input[name=name]').val(db);
                dialog.find('input[name=path]').val(savedBackupPath);                

                dialog.dialog({
                    modal: true,
                    title: 'Backup database ' + db,
                    width: 400,
                    buttons: {
                        'Start Backup': function () {
                            $(this).find('form').submit();
                        },
                        'Cancel': function () {
                            $(this).dialog('destroy');
                        }
                    }
                });
                
            });

        $('#backupDialog form')
            .validate({
                rules: {
                    path: {
                        required: true,
                        remote: "@Url.Action("BackupPathOk")"
                    }
                },
                submitHandler: function (form) {
                    $(form).ajaxSubmit({
                        beforeSubmit: function (vals, form) {
                            return form.valid();
                        },
                        success: function(responseText, statusText, xhr, form) {
                            savedBackupPath = form.find('input[name=path]').val();
                            var db = form.find('input[name=name]').val();
                            raven.ui.displayMessage($.format('Backup for database {0} has started', db));
                            var lastBackup = $(".db[data-db='" + db + "'] .lastBackup");
                            lastBackup.find(".humaneDate").data('date', new Date().getTime());
                            updateDates();
                            lastBackup.effect('highlight');
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            raven.ui.displayMessage($.format('There was an error backing up the database: {0}', errorThrown), 'warning');
                        }
                    });
                    $('#backupDialog').dialog('destroy');
                }
        });

        $.validator.addMethod('dbName', function(v) {
            return ( /[a-z][a-z0-9_-]*/i ).test(v);
        }, 'Must begin with letter and consist of letters, digits, underscores and hyphens only');

        $('#newDialog form').validate({
            rules: {
                name: {
                    required: true,
                    minlength: 3,
                    maxlength: 30,
                    dbName: true,
                    remote: {url: "@Url.Action("ValidateName")", cache: false}
                }
            }
        });
        
        $('#newDialog').dialog({
            autoOpen: false,
            modal: true,
            title: "Create a new database",
            width: 500,
            buttons: {
                "Create": function () {
                    $(this).find('form').submit();
                },
                "Cancel": function () {
                    $(this).dialog('close');
                }
            }
        });

        $('#newButton').on('click', function () { $('#newDialog').dialog('open'); });
        
        $('#deleteConfirmationDialog form')
            .validate({
                rules: {
                    nameVerify: {
                        required: true,
                        equalTo: '#deleteDatabaseConfirmationName'
                    }
                },
                messages: {
                    nameVerify: {
                        equalTo: 'Enter the database name'
                    }
                },
                submitHandler: function (form) {
                    var db = $('#deleteDatabaseConfirmationName').val();
                    if (confirm("Really delete database " + db + "?")) {
                        form.submit();
                    };
                }
            });
    });
</script>
